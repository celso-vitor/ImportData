using System;
using System.Diagnostics;
using System.IO;

namespace SequenceAssemblerLogic.Aligment;
public class SequenceAligner
{
    private const string ClustaloName = "clustalo.exe";

    private string GetTempFilePath(string fileName) => Path.Combine(Path.GetTempPath(), fileName);

    private void EnsureClustaloResources()
    {
        if (!File.Exists(GetTempFilePath(ClustaloName)))
        {
            File.WriteAllBytes(GetTempFilePath(ClustaloName), SequenceAssemblerLogic.Properties.Resources.clustalo);
            File.WriteAllBytes(GetTempFilePath("libgcc_s_sjlj-1.dll"), SequenceAssemblerLogic.Properties.Resources.libgcc_s_sjlj_1);
            File.WriteAllBytes(GetTempFilePath("libgomp-1.dll"), SequenceAssemblerLogic.Properties.Resources.libgomp_1);
            File.WriteAllBytes(GetTempFilePath("libstdc++-6.dll"), SequenceAssemblerLogic.Properties.Resources.libstdc___6);
            File.WriteAllBytes(GetTempFilePath("pthreadGC2-w64.dll"), SequenceAssemblerLogic.Properties.Resources.pthreadGC2_w64);
        }
    }

    public void AlignSequences(List<FASTA> sequences)
    {
        // Escreve a lista de sequências em um arquivo temporário
        string input = Path.Combine(Path.GetTempPath(), "tempFasta.fasta");
        using (StreamWriter writer = new StreamWriter(input))
        {
            foreach (var sequence in sequences)
            {
                writer.WriteLine($">{sequence.ID} {sequence.Description}");
                writer.WriteLine(sequence.Sequence);
            }
        }

        EnsureClustaloResources();

        string output = "output.txt";

        ProcessStartInfo startInfo = new ProcessStartInfo
        {
            FileName = GetTempFilePath(ClustaloName),
            Arguments = $"-i \"{input}\" -o \"{output}\" --force",
            RedirectStandardOutput = true,
            RedirectStandardError = true,
            UseShellExecute = false,
            CreateNoWindow = true,
        };

        try
        {
            using (Process process = new Process { StartInfo = startInfo })
            {
                process.Start();

                string standardOutput = process.StandardOutput.ReadToEnd();
                string standardError = process.StandardError.ReadToEnd();

                process.WaitForExit();

                if (string.IsNullOrEmpty(standardOutput) && string.IsNullOrEmpty(standardError))
                {
                    Console.WriteLine("No standard output or error was generated by the process.");
                }
                else
                {
                    Console.WriteLine(standardOutput);
                    if (!string.IsNullOrEmpty(standardError))
                    {
                        Console.Error.WriteLine(standardError);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An exception occurred: {ex.Message}");
        }

        if (File.Exists(output))
        {
            string outputFileContent = File.ReadAllText(output);
            Console.WriteLine("Output file content:");
            Console.WriteLine(outputFileContent);
        }
        else
        {
            Console.WriteLine("Output file not found.");
        }
    }

}
